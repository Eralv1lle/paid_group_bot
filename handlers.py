from aiogram import Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ChatJoinRequest, ContentType
from aiogram.enums import ParseMode

import json

from config import *
from keyboards import setup_join_kb


router = Router()

with open("pending_requests.json", "r", encoding="utf-8") as file:
    pending_requests = json.load(file)
pending_requests = {int(k): v for k, v in pending_requests.items()}
print(pending_requests)

@router.message(CommandStart())
async def handle_start(message: Message, bot: Bot):
    try:
        member = await bot.get_chat_member(GROUP_ID, message.from_user.id)

        if member.status in ("member", "administrator", "creator"):
            await message.answer("‚úÖ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ! –û–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.")
            return

    except Exception as err:
        print(err)

    if message.from_user.id in pending_requests:
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
        return

    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.")

@router.chat_join_request()
async def handle_join_request(join_request: ChatJoinRequest, bot: Bot):
    if join_request.chat.id != GROUP_ID:
        return

    user_id = join_request.from_user.id
    pending_requests[user_id] = {"id": user_id, "name": join_request.from_user.first_name}

    try:
        await bot.send_message(
            user_id,
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
            f"–ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É ‚Äî *500 ‚ÇΩ*.\n\n"
            f"–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: `1234 1234 1234 1234`\n"
            f"üì≤ –°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É): `+7 999 999 99 99`\n\n"
            f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—é–¥–∞ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç), –∏ –º—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É.",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as err:
        username = "" if not join_request.from_user.username else f", {join_request.from_user.username}"
        await bot.send_message(
            ADMIN_ID,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}{username}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        )
        print(err)

@router.message(F.from_user.id.in_(pending_requests), F.chat.type == "private")
async def handle_receipt(message: Message, bot: Bot):
    try:
        content_type = message.content_type

        if content_type == ContentType.TEXT:
            await bot.send_message(
                ADMIN_ID,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, –ø—Ä–∏—Å–ª–∞–ª —á–µ–∫ —Ç–µ–∫—Å—Ç–æ–º:\n\n{message.html_text}",
                parse_mode=ParseMode.HTML,
                reply_markup=setup_join_kb(message.from_user.id)
            )
            await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à —á–µ–∫.\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞—è–≤–∫—É.")
        elif content_type == ContentType.PHOTO:
            await bot.send_photo(
                ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=f"{message.html_text}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —á–µ–∫–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=setup_join_kb(message.from_user.id)
            )
            await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à —á–µ–∫.\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞—è–≤–∫—É.")
        elif content_type == ContentType.DOCUMENT:
            await bot.send_document(
                ADMIN_ID,
                document=message.document.file_id,
                caption=f"{message.html_text}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, –ø—Ä–∏—Å–ª–∞–ª —á–µ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
                parse_mode=ParseMode.HTML,
                reply_markup=setup_join_kb(message.from_user.id)
            )
            await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à —á–µ–∫.\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞—è–≤–∫—É.")
        else:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\nüìù —Ç–µ–∫—Å—Ç, üñº —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ üìÑ –¥–æ–∫—É–º–µ–Ω—Ç.")

    except Exception as err:
        print(err)

@router.callback_query(F.data.startswith("confirm:"))
async def handle_confirm(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[1])
    user = pending_requests.get(user_id)

    try:
        await bot.approve_chat_join_request(GROUP_ID, user_id)
    except:
        pass

    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}, –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    await callback.message.delete()

    await bot.send_message(
        user_id,
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫."
    )

    del pending_requests[user_id]

@router.callback_query(F.data.startswith("cancel:"))
async def handle_confirm(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[1])
    user = pending_requests.get(user_id)

    try:
        await bot.decline_chat_join_request(GROUP_ID, user_id)
    except:
        pass

    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}, –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
    await callback.message.delete()

    await bot.send_message(
        user_id,
        "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.\nüí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\nüîÑ –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –µ—â—ë —Ä–∞–∑."
    )

    del pending_requests[user_id]
